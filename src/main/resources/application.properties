spring.application.name=OAuth Client Sample

### server port
server.port=8081

#client registration configuration
spring.security.oauth2.client.registration.keycloak.client-id=springboot-openid-client-app
spring.security.oauth2.client.registration.keycloak.client-secret=TlOjOmy4vEQbPsKjMqV009wYHdlGaIG2
spring.security.oauth2.client.registration.keycloak.authorization-grant-type=authorization_code
spring.security.oauth2.client.registration.keycloak.scope=openid

#OIDC provider configuration:
spring.security.oauth2.client.provider.keycloak.issuer-uri=http://localhost:8180/auth/realms/Keycloak_SpringBoot
#spring.security.oauth2.client.registration.keycloak.redirect-uri=http://localhost:9090/login/oauth2/code/springboot-openid-client-app

spring.security.oauth2.client.provider.keycloak.user-name-attribute=preferred_username

#validating JWT token against our Keycloak server
spring.security.oauth2.resourceserver.jwt.issuer-uri=http://localhost:8180/auth/realms/Keycloak_SpringBoot

#session timeout
server.servlet.session.timeout=30m

app.auth.username= my-user
app.auth.password=my-password
app.auth.grant_type=password

#H2 database configuration
spring.datasource.url=jdbc:h2:mem:testdb;DB_CLOSE_DELAY=-1;DB_CLOSE_ON_EXIT=FALSE
spring.datasource.driverClassName=org.h2.Driver
spring.datasource.username=sa
spring.datasource.password=
spring.jpa.database-platform=org.hibernate.dialect.H2Dialect
